import{initializeApp}from"https://www.gstatic.com/firebasejs/10.12.5/firebase-app.js";import{getFirestore,collection,addDoc,getDocs,query,where,doc,getDoc,updateDoc,serverTimestamp}from"https://www.gstatic.com/firebasejs/10.12.5/firebase-firestore.js";const firebaseConfig={apiKey:"AIzaSyDfGRHGt6gg0Fs76XLRmGqGMD3qZTgg12E",authDomain:"manmachine-bd039.firebaseapp.com",projectId:"manmachine-bd039",storageBucket:"manmachine-bd039.firebasestorage.app",messagingSenderId:"156270929392",appId:"1:156270929392:web:74f8771fc565d55569e935"},app=initializeApp(firebaseConfig),db=getFirestore(app),registerForm=document.getElementById("registerForm"),messageDiv=document.getElementById("message"),machCounter=document.getElementById("machCounter"),displayEmail=document.getElementById("displayEmail"),displayWallet=document.getElementById("displayWallet"),referralLinkInput=document.getElementById("referralLink"),countdown=document.getElementById("countdown"),fetchUserDataBtn=document.getElementById("fetchUserDataBtn"),userEmailInput=document.getElementById("userEmailInput"),userCountDiv=document.getElementById("userCount"),referralsList=document.getElementById("referralsList");function updateMessage(e,t){messageDiv.textContent=e,messageDiv.style.color=t}function initializeCountdown(e){const t=setInterval((()=>{const r=new Date,a=Math.max(0,e-r),n=Math.floor(a/864e5),o=Math.floor(a%864e5/36e5),s=Math.floor(a%36e5/6e4),l=Math.floor(a%6e4/1e3);countdown.textContent=`${n}d ${o}h ${s}m ${l}s`,a<=0&&(clearInterval(t),countdown.textContent="Offer expired!")}),1e3)}async function checkUserExists(e,t){try{const r=collection(db,"users"),a=query(r,where("email","==",e)),n=query(r,where("walletAddress","==",t)),[o,s]=await Promise.all([getDocs(a),getDocs(n)]);return!o.empty||!s.empty}catch(e){return console.error("Error checking user existence:",e),!0}}async function verifyReferrer(e){try{const t=collection(db,"users"),r=query(t,where("referralId","==",e)),a=await getDocs(r);return a.empty?null:a.docs[0].id}catch(e){return console.error("Error verifying referrer:",e),null}}async function saveReferral(e,t){try{const r=collection(db,`users/${e}/referrals`);await addDoc(r,{...t,joinedAt:serverTimestamp()});const a=doc(db,"users",e),n=await getDoc(a);if(n.exists()){const e=n.data(),t=e.referralBonus||0,r=e.machRate||1;await updateDoc(a,{referralBonus:t+5e4,machRate:r+.2}),console.log("Referral saved and bonus applied!")}}catch(e){console.error("Error saving referral or applying bonus:",e)}}async function startMachCounter(){const e=localStorage.getItem("email");if(e)try{const t=collection(db,"users"),r=query(t,where("email","==",e)),a=await getDocs(r);if(a.empty)return void console.error("User not found.");a.forEach((e=>{const t=e.data(),r=new Date(t.createdAt),a=t.walletAddress,n=t.initialMach||1e5,o=t.machRate||1,s=t.referralBonus||0;function l(){const e=new Date,t=Math.floor((e-r)/1e3),l=n+t/60*o+s;machCounter.textContent=`Wallet: ${a} | MACH Earned: ${l.toFixed(4)}`}l(),setInterval(l,1e3)}))}catch(e){console.error("Error calculating MACH:",e)}}async function displayUserInfo(){const e=localStorage.getItem("email"),t=localStorage.getItem("walletAddress");if(!e||!t)return displayEmail.textContent="Not logged in.",void(displayWallet.textContent="");displayEmail.textContent=`Email: ${e}`,displayWallet.textContent=`Wallet: ${t}`;try{const t=collection(db,"users"),r=query(t,where("email","==",e)),a=await getDocs(r);a.empty||a.forEach((e=>{const t=e.data();referralLinkInput.value=t.referralLink||"No referral link available"}))}catch(e){console.error("Error retrieving referral link:",e)}try{const t=collection(db,"users"),r=query(t,where("email","==",e)),a=await getDocs(r);if(!a.empty){const e=a.docs[0],t=collection(db,`users/${e.id}/referrals`),r=await getDocs(t);if(referralsList.innerHTML="",r.empty){const e=document.createElement("li");e.textContent="No referrals yet.",referralsList.appendChild(e)}else r.forEach((e=>{const t=e.data(),r=document.createElement("li");r.textContent=`"Gained 50000 Tokens From =>") ${t.email} (${t.walletAddress}) - Joined: ${t.joinedAt?t.joinedAt.toDate().toLocaleString():"Unknown"}`,referralsList.appendChild(r)}))}}catch(e){console.error("Error displaying referrals:",e)}}async function displayUserCount(){try{const e=collection(db,"users"),t=(await getDocs(e)).size;userCountDiv.textContent=`Total Users: ${t}`}catch(e){console.error("Error retrieving user count:",e)}}function handleRegistrationFormVisibility(){const e=localStorage.getItem("email"),t=localStorage.getItem("walletAddress"),r=document.getElementById("registrationContainer"),a=document.getElementById("userInfoContainer");e&&t?(r&&(r.style.display="none"),a&&(a.style.display="block")):(r&&(r.style.display="block"),a&&(a.style.display="none"))}async function updateMachDashboard(){const e=localStorage.getItem("email");if(e)try{const t=collection(db,"users"),r=query(t,where("email","==",e)),a=await getDocs(r);if(a.empty)return void["balanceDisplay","rateDisplay","referralBonusDisplay"].forEach((e=>{const t=document.getElementById(e);t&&(t.textContent="User not found")}));const n=a.docs[0].data(),o=n.initialMach||0,s=n.machRate||1,l=n.referralBonus||0,i=n.createdAt||(new Date).toISOString(),c=calculateMachBalance({initialMach:o,machRate:s,referralBonus:l,createdAt:i}),d=document.getElementById("balanceDisplay"),u=document.getElementById("rateDisplay"),m=document.getElementById("referralBonusDisplay");d&&(d.textContent=`Total MACH Balance: ${c.toFixed(4)}`),u&&(u.textContent=`Current MACH Rate: ${s.toFixed(2)} MACH/minute`),m&&(m.textContent=`Referral Bonus: ${l.toFixed(4)} MACH`)}catch(e){console.error("Error updating MACH dashboard:",e),["balanceDisplay","rateDisplay","referralBonusDisplay"].forEach((e=>{const t=document.getElementById(e);t&&(t.textContent="Error loading data")}))}else["balanceDisplay","rateDisplay","referralBonusDisplay"].forEach((e=>{const t=document.getElementById(e);t&&(t.textContent="Please log in")}))}registerForm.addEventListener("submit",(async e=>{e.preventDefault();const t=document.getElementById("address").value.trim(),r=document.getElementById("email").value.trim();if(t&&r)try{if(await checkUserExists(r,t))return void updateMessage("This email or wallet address is already registered.","red");const e=crypto.randomUUID(),a=`${window.location.origin}/?ref=${e}`,n=new URLSearchParams(window.location.search).get("ref");let o=null;n&&(o=await verifyReferrer(n));const s=collection(db,"users");await addDoc(s,{walletAddress:t,email:r,referralId:e,referralLink:a,createdAt:(new Date).toISOString(),initialMach:1e5,machRate:1,referralBonus:0});o&&await saveReferral(o,{name:r.split("@")[0],email:r,walletAddress:t}),localStorage.setItem("email",r),localStorage.setItem("walletAddress",t),updateMessage("Successfully registered and claimed 100,000 MACH!","green"),referralLinkInput.value=a,displayUserInfo(),startMachCounter(),handleRegistrationFormVisibility()}catch(e){console.error("Error during registration:",e),updateMessage("An error occurred. Please try again later.","red")}else updateMessage("Please fill out all fields.","red")})),fetchUserDataBtn.addEventListener("click",(async()=>{const e=userEmailInput.value.trim();if(e)try{const t=collection(db,"users"),r=query(t,where("email","==",e)),a=await getDocs(r);if(a.empty)return void updateMessage("User not found.","red");a.forEach((e=>{const t=e.data();updateMessage(`User Email: ${t.email}, Wallet: ${t.walletAddress}, Initial MACH: ${t.initialMach}, MACH Rate: ${t.machRate}, Referral Bonus: ${t.referralBonus}`,"green")}))}catch(e){console.error("Error fetching user data:",e),updateMessage("An error occurred. Please try again later.","red")}else updateMessage("Please enter an email.","red")})),document.addEventListener("DOMContentLoaded",(()=>{initializeCountdown((new Date).getTime()+79488e5),startMachCounter(),displayUserInfo(),displayUserCount(),handleRegistrationFormVisibility()}));